#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 20 23:32:30 2018

@author: fubao
"""

#  673. Number of Longest Increasing Subsequence;  LIS  facebook


# extension of longest increasing subsequence;  Longest Continuous Increasing Subsequence

'''
Given an unsorted array of integers, find the number of longest increasing subsequence.

Example 1:
Input: [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:
Input: [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.
Note: Length of the given array will be not exceed 2000 and the answer is guaranteed to be fit in 32-bit signed int.
'''


class Solution(object):
    def findNumberOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        
        # 1st naive way; get all the subsquence n+ n-1 + n-2  ==> O(n^2); time consuming if n is big
        
        
        # Failed 2nd use DP;
        #  [1,3,5,4,7]      => [1,3,5,7]  has optimal substructure 1,3,5 => overlapping subproblem [1,3,5], [1,3,7] has overlapping subproblem [1,3]
        
        # each subproblem has optimal solutions
        '''
        define DP[i][j] as the number of longest increasing subsequence from index i to j in nums
        
        DP[i][j+1] = DP[i][j] + 1 if nums[j+1] > nums[j]                   #Wrong with this formula
                  DP[i][j] otherwise
            for i from 0 to len(nums)-1
        
        final result is DP[0][n]?
        
        
        DP[0][0] = 1
        DP[i][i] = 1
        DP[i][0] = 0;  i != 0
        '''
        '''
        if nums is None or len(nums) == 0:
            return 0
        n = len(nums)
        DP = [[1]*n for i in range(0, n)]
        #DP[0][0] = 1
        for i in range(n-1, -1, -1):            # backward traversal; start from right to left
            DP[i][i] = 1
            for j in range(i+1, n-1):
                if nums[j+1] > nums[j]:
                    DP[i][j] = DP[i][j-1] + 1
                else:
                    DP[i][j] = DP[i][j-1]
        return DP[0][n-1]
        '''
        
        # SUCCESS 3rd DP again; consider the length of LIS.  define numLIS[i] as the number of LIS with the ending index i; lenLIS[i] as the length of LIS with the ending index i;     numLIS[i+1] = numLIS[i] + 1 if lenLIS[i] == lenLIS[j] else if nums[i+1] > nums[i]: numsLIS[i+1] = numsLIS[i]
        
        # reference: http://www.cnblogs.com/grandyang/p/7603903.html
        
        #first need to get the lenLIS;
        if len(nums) == 0:
            return 0
        
        lenLIS = [1] * len(nums)
        numsLIS = [1] * len(nums)
        for i in range(1, len(nums)):
            for j in range(0, i):
                if nums[j] < nums[i]:
                    if lenLIS[j] >= lenLIS[i]:
                        lenLIS[i] = lenLIS[j] + 1
                        numsLIS[i] = numsLIS[j]
                    elif lenLIS[j] + 1 == lenLIS[i]:
                        numsLIS[i] += numsLIS[j]
        
        longestLIS = max(lenLIS)
        
        #print ("LL: ", longestLIS, lenLIS, numsLIS)
        ans = 0
        for i, c in enumerate(numsLIS):
            if lenLIS[i] == longestLIS:
                ans += c
                    
        return ans
        